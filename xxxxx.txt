# 現状 ここまでは終了済


# --ここから繰り返し 数量分
# モデルクラスからCSVファイルを探す

# CSVファイルを開く
# ----ここから繰り返し 行数分
#  行を読み取る
#  「ID」「削除」がある場合（削除）
#    モデルクラスと「ID」を使用し、データベースからフィールドを探す
#    取得したフィールドを削除する
#  「ID」がある場合（編集）
#    行から「ID」を取り除き、データベースからレコードを探す
#    ヘッダーからキーを一覧取得する
# ------ここから繰り返し キー数分
#    空を許す場合
#      更新の条件を「行の値がレコードの値と等しく無い場合」とする
#    その他（空を許さない場合）
#      更新の条件を「行の値が空でなく、かつ、 行の値がレコードの値と等しく無い場合」とする

#    取得した条件が真の場合
#      行の値を更新用のハッシュに代入する
#      ヘッダーの値を更新用の配列に入れる
# ------ここまで繰り返し
#    更新用のハッシュを使って更新する
#    もし更新用の配列に値があればメッセージを表示する。
#  その他（新規作成）
#    ヘッダーからオプションがfalseのキーを取得する
# ------ここから繰り返し キー数分
#    作成用のハッシュに、値を代入する
# ------ここまで繰り返し
#    作成用のハッシュを使って作成する
#    作成したことをメッセージで表示する
# ----ここまで繰り返し

# --ここまで繰り返し






# ディレクトリ内のモデル定数を配列で取得
def get_models_from_csv(dir_path)

  proc_for_array = Proc.new do |path|
    basename_string = path[/.*(?=\.csv)/]
    table_sym = basename_string.pluralize.to_sym
    # テーブルがあれば、モデルを呼び出す
    $connection.table_exists?(table_sym) ? basename_string.classify.constantize : nil
  end

  value = Dir.children(dir_path).map(&proc_for_array).compact
  value.present? ? value : raise('CSVファイルに対応するモデルがあるか確認したか？今すぐしろ!')
end